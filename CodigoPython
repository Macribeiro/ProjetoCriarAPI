# -- Coding: UTF-8 --
#coding: utf-8

import flask
from flask import request, jsonify
import mysql.connector
'''
Cria o objeto de aplicativo Flask, que contém dados sobre o aplicativo e também métodos (funções de objeto)
que instruem o aplicativo a realizar determinadas ações.
A última linha, app.run (), é um desses métodos.
'''
app = flask.Flask(_name_)

'''
Inicia o depurador. Com esta linha, se seu código estiver malformado, você verá um erro ao visitar
seu aplicativo. Caso contrário, você só verá uma mensagem genérica como Bad Gateway no navegador
quando houver um problema com seu código.
'''
app.config['DEBUG'] = True
app.run(host= '0.0.0.0')

#mydb = mysql.connector.connect(
#  host="localhost",
#  user="root",
#  password="1234",
#  database = "banda_database"
#)

config = {
'user': 'root',
'password': '1234',
'host': '127.0.0.1',
'port': '3306',
'database': 'banda_database',
'raise_on_warnings': True,}


#metodo para obter uma unica banda
@app.route('/api/v1/bandas/<int:id>', methods=['GET'])
def api_get_unico(id):
    mydb = mysql.connector.connect(**config)
    mc = mydb.cursor(dictionary=True)
    mc.execute("SELECT * FROM Banda WHERE id=" +str(id))
    result = mc.fetchone()
    if not result:
        result = "Banda não encontrada."
        mc.close()
        mydb.close()
        return jsonify(result)
    else :
        mc.close()
        mydb.close()
        return jsonify(result)

#metodo para obter todas as bandas cadastradas
@app.route('/api/v1/bandas/', methods=['GET'])
def api_get_todos():
    mydb = mysql.connector.connect(**config)
    mc = mydb.cursor(dictionary=True)
    mc.execute("SELECT * FROM Banda")
    result = mc.fetchall()
    return jsonify(result)

#metodo para inserir uma nova banda
@app.route('/api/v1/bandas/inserir', methods=['POST'])
def api_post_inserir():
    mydb = mysql.connector.connect(**config)
    mc = mydb.cursor(dictionary=True)

    #Obtem as variaveis
    nome = request.json.get('nome')
    primeiro_album = request.json.get('primeiro_album')
    ultimo_album = request.json.get('ultimo_album')

    #montando o comando de INSERT
    sql = "INSERT INTO Banda (nome, primeiro_album, ultimo_album) VALUES (%s,%s,%s)"

    #criando uma variavel para inserir os valores que foram obtidos nas linhas acima
    value = (nome, primeiro_album, ultimo_album)

    #juntando SQL e VAL em um unico comando e enviando ao banco
    mc.execute(sql, value)

    #efetuando commit
    mydb.commit()

    #montando uma mensagem de sucesso e retornando-a em formato JSON
    result = "Banda " + nome + " adicionada com sucesso."
    #Fechando a conexão
    mc.close()
    mydb.close()
    return jsonify(result)

#Metodo para alterar o nome da banda
@app.route('/api/v1/bandas/atualizar', methods=['PUT'])
def api_put_atualizar():
    mydb = mysql.connector.connect(**config)
    mc = mydb.cursor()
    id = request.json.get('id')
    nome = request.json.get('nome')
    #Realizando a consulta para verificar se o ID informado existe
    mc.execute("SELECT * FROM Banda WHERE id=" +str(id))
    result = mc.fetchone()
    if not result:
        result = "Banda não encontrada."
        mc.close()
        mydb.close()
        return jsonify(result)
    else :
        sql = "UPDATE Banda SET nome = %s WHERE id = %s"
        value = (nome, id)
        mc.execute(sql, value)
        mydb.commit()
        mc.close()
        mydb.close()
        result = "Banda com o ID " + id + " foi editada para o nome " + nome + " com sucesso."
        return jsonify(result)

@app.route('/api/v1/bandas/excluir/<int:id>', methods=['DELETE'])
def api_delete_unica(id):
    mydb = mysql.connector.connect(**config)
    mc = mydb.cursor()
    #montando o comando DELETE
    sql = "DELETE FROM Banda WHERE id = " + str(id)

    #montando um SELECT para checar se a linha existe e executando
    sqlexists = "SELECT * FROM Banda WHERE id = " + str(id)
    mc.execute(sqlexists)
    row_exists = mc.fetchone()
    if not row_exists :
        result = "O ID informado não existe na base. Nenhum dado afetado."
        mc.close()
        mydb.close()
    else :
        mc.execute(sql)
        #efetuando commit
        mydb.commit()
        #montando uma mensagem de sucesso e retornando-a em formato JSON
        result = "Banda com o ID " + str(id) + " foi excluida com sucesso."
        mc.close()
        mydb.close()

    return jsonify(result)

@app.errorhandler(405)
def erro_405(e):
    return "Método não permitido. "

@app.errorhandler(500)
def erro_500(e):
    return "Não foi possível processar a requisição. Tente novamente mais tarde."

@app.errorhandler(404)
def page_not_found(e):
    return "<h1>404</h1><p>O recurso não foi encontrado.</p>", 404

#Um método que executa o servidor de aplicativos.
app.run()
